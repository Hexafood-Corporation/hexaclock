service: hexaclock
frameworkVersion: '3'


custom:
  employeesTableName: 'employees-table-${sls:stage}'
  accountId: '590184086377'
  region: 'us-east-1'
  userPoolId: 'us-east-1_Mx2ZuR78g'
  cognitoDomain: 'https://hexaclock.auth.us-east-1.amazoncognito.com'
  apiUrl: 'https://f3lpqbpke9.execute-api.us-east-1.amazonaws.com'

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role: arn:aws:iam::${self:custom.accountId}:role/LabRole
      # statements:
      #   - Effect: Allow
      #     Action:
      #       - dynamodb:Query
      #       - dynamodb:Scan
      #       - dynamodb:GetItem
      #       - dynamodb:PutItem
      #       - dynamodb:UpdateItem
      #       - dynamodb:DeleteItem
      #     Resource:
      #       - Fn::GetAtt: [ EmployeesTable, Arn ]
  environment:
    EMPLOYEES_TABLE: ${self:custom.employeesTableName}

functions:
  # api:
  #   handler: src/index.handler
  #   events:
  #     - httpApi: '*'
  createTimeClock:
    handler: src/functions/createTimeClock/handler.createTimeClock
    environment:
      EMPLOYEES_TABLE: ${self:custom.employeesTableName}
    events:
      - http:
          path: timeclock
          method: post
          # authorizer: #desprotegendo endpoints temporariamente
          #   arn: arn:aws:cognito-idp:${self:custom.region}:${self:custom.accountId}:userpool/${self:custom.userPoolId}
  createEmployee:
    handler: src/functions/createEmployee/handler.createEmployee
    environment:
      EMPLOYEES_TABLE: ${self:custom.employeesTableName}
    events:
      - http:
          path: employee
          method: post
  getTimeClockPerEmployeeByDate:
    handler: src/functions/getTimeClockPerEmployeeByDate/handler.getTimeClockPerEmployeeByDate
    environment:
      EMPLOYEES_TABLE: ${self:custom.employeesTableName}
    events:
      - http:
          path: timeclock/{employeeId}/{date}
          method: get
          # authorizer: #desprotegendo endpoints temporariamente
          #   arn: arn:aws:cognito-idp:${self:custom.region}:${self:custom.accountId}:userpool/${self:custom.userPoolId}
resources:
  Resources:
    EmployeesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.employeesTableName}
        AttributeDefinitions:
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
          - AttributeName: "username"
            AttributeType: "S"
          - AttributeName: "registry"
            AttributeType: "S"
          - AttributeName: "date"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "PK"
            KeyType: "HASH"
          - AttributeName: "SK"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: "UsernameIndex"
            KeySchema:
              - AttributeName: "username"
                KeyType: "HASH"
              - AttributeName: "PK"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
          - IndexName: "RegistryIndex"
            KeySchema:
              - AttributeName: "registry"
                KeyType: "HASH"
              - AttributeName: "PK"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
          - IndexName: "TimeClockDateIndex"
            KeySchema:
              - AttributeName: "PK" 
                KeyType: "HASH"
              - AttributeName: "date" 
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL" 

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: hexaclock
        Schema:
          - Name: email
            Required: true
            Mutable: true
            AttributeDataType: String
        Policies:
          PasswordPolicy:
            MinimumLength: 6

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: hexaclock-client
        GenerateSecret: false
        UserPoolId: 
          Ref: UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        AllowedOAuthFlows:
          - "implicit"
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - "openid"
          - "email"
          - "profile"
        CallbackURLs:
          - ${self:custom.apiUrl}
        LogoutURLs:
          - ${self:custom.apiUrl}
        SupportedIdentityProviders: ["COGNITO"]
        
